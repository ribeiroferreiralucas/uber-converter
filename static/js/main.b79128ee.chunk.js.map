{"version":3,"sources":["tools/RecipeProporsinalResizer/RecipeProporsinalResizer.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["InputNumber","_number","_string","this","string","value","eventValue","console","log","oldValue","number","oldStringValue","Number","Ingredient","qnt","qntResultant","RefIngredient","tools","name","description","component","useState","ingredients","setIngredients","refIngredient","setRefIngredient","proporsion","setProporsion","useEffect","forEach","ingredient","InputGroup","FormControl","placeholder","className","onChange","event","target","onChangeReferenceOriginalQuantity","onChangeReferenceResultantQuantity","Stack","gap","map","ing","index","id","Button","variant","aria-label","onClick","ingredientToRemove","filter","preventDefault","icon","faTrash","editQnt","Text","size","faPlus","App","Container","tool","Row","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","SSRProvider","document","getElementById"],"mappings":"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","file":"static/js/main.b79128ee.chunk.js","sourcesContent":["import { faPlus, faTrash } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { useState, useEffect, ChangeEvent } from \"react\";\nimport {\n  Container,\n  Row,\n  Form,\n  FormControl,\n  InputGroup,\n  Button,\n  Stack,\n} from \"react-bootstrap\";\nimport \"./RecipeProporsinalResizer.css\";\n\nclass InputNumber {\n  private _number: number = 0;\n  public get number(): number {\n    return this._number;\n  }\n\n  private _string: string = \"\";\n  public get string(): string {\n    return this._string;\n  }\n  public set string(value: string) {\n    let eventValue = value;\n    console.log(eventValue);\n    const oldValue = this.number;\n    const oldStringValue = this.string;\n\n    this._number = Number(eventValue);\n    this._string = eventValue;\n    if (!this._number && eventValue) {\n      this._number = oldValue;\n      this._string = oldStringValue;\n    }\n  }\n\n  constructor() {\n    this.string = \"\";\n  }\n}\n\nclass Ingredient {\n  qnt: InputNumber = new InputNumber();\n  qntResultant: number = 0;\n}\nclass RefIngredient {\n  qnt: InputNumber = new InputNumber();\n  qntResultant: InputNumber = new InputNumber();\n}\n\nconst RecipeProporsionalResizer = () => {\n  const [ingredients, setIngredients] = useState<Ingredient[]>([\n    new Ingredient(),\n  ]);\n\n  const [refIngredient, setRefIngredient] = useState<RefIngredient>(new RefIngredient());\n\n  const [proporsion, setProporsion] = useState<number>(0);\n\n  useEffect(() => {\n    ingredients.forEach((ingredient) => {\n      ingredient.qntResultant = ingredient.qnt.number * proporsion;\n    });\n    setIngredients([...ingredients]);\n  }, [proporsion]);\n\n  function editQnt(\n    ingredient: Ingredient,\n    event: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>\n  ): void {\n    ingredient.qnt.string = event.target.value;\n\n    ingredient.qntResultant = ingredient.qnt.number * proporsion;\n    setIngredients([...ingredients]);\n  }\n\n  function onChangeReferenceOriginalQuantity(\n    ingredient: RefIngredient,\n    event: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>\n  ): void {\n    ingredient.qnt.string = event.target.value;\n    setRefIngredient({ ...ingredient });\n\n    if (ingredient.qnt.number == 0) {\n      setProporsion(0);\n      return;\n    }\n\n    setProporsion(ingredient.qntResultant.number / ingredient.qnt.number);\n  }\n  function onChangeReferenceResultantQuantity(\n    ingredient: RefIngredient,\n    event: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>\n  ): void {\n    ingredient.qntResultant.string = event.target.value;\n    setRefIngredient({ ...ingredient });\n\n    if (ingredient.qntResultant.number == 0) {\n      setProporsion(0);\n      return;\n    }\n\n    setProporsion(ingredient.qntResultant.number / ingredient.qnt.number);\n  }\n  function addIngredient(): void {\n    setIngredients([...ingredients, new Ingredient()]);\n  }\n  function removeIngredient(ingredientToRemove: Ingredient): void {\n    setIngredients([\n      ...ingredients.filter((ing) => ing !== ingredientToRemove),\n    ]);\n  }\n\n  return (\n    <>\n      <h3>Referencial Value</h3>\n      <div>\n        <InputGroup>\n          {/* <InputGroup.Text>Reference Name</InputGroup.Text> */}\n          <FormControl placeholder=\"Reference name\" />\n          <FormControl\n            className=\"form-number\"\n            placeholder=\"Original Quantity\"\n            value={refIngredient.qnt.string}\n            onChange={(event) =>\n              onChangeReferenceOriginalQuantity(refIngredient, event)\n            }\n          />\n          <FormControl\n            className=\"form-number \"\n            placeholder=\"New Quantity\"\n            value={refIngredient.qntResultant.string}\n            onChange={(event) =>\n              onChangeReferenceResultantQuantity(refIngredient, event)\n            }\n          />\n        </InputGroup>\n      </div>\n      <div>\n        <h3>Recipe</h3>\n        <Stack gap={1}>\n          {ingredients.map((ing, index) => {\n            return (\n              <InputGroup id={\"ingredient\" + index}>\n                {console.log(ing)}\n                <Button\n                  variant=\"outline-secondary\"\n                  aria-label=\"Close\"\n                  onClick={(event) => {\n                    removeIngredient(ing);\n                    event.preventDefault();\n                  }}\n                >\n                  <FontAwesomeIcon icon={faTrash}></FontAwesomeIcon>\n                </Button>\n                <FormControl placeholder=\"Ingredient name\" />\n                <FormControl\n                  className=\"form-number\"\n                  placeholder=\"Original Quantity\"\n                  value={ing.qnt.string}\n                  onChange={(event) => editQnt(ing, event)}\n                />\n                <InputGroup.Text>{ing.qntResultant}</InputGroup.Text>\n              </InputGroup>\n            );\n          })}\n          <Button\n            variant=\"outline-dark\"\n            size=\"lg\"\n            onClick={(event) => {\n              addIngredient();\n              event.preventDefault();\n            }}\n          >\n            <FontAwesomeIcon icon={faPlus} />\n          </Button>\n        </Stack>\n      </div>\n    </>\n  );\n};\n\nexport default RecipeProporsionalResizer;\n","import React from \"react\";\nimport { Container, Row } from \"react-bootstrap\";\nimport \"./App.css\";\nimport RecipeProporsionalResizer from \"./tools/RecipeProporsinalResizer/RecipeProporsinalResizer\";\n\ninterface Tool {\n  name: string;\n  description: string;\n  component: React.FC;\n}\n\nexport const tools: Tool[] = [\n  {\n    name: \"Recipe Proporsinal Resizer\",\n    description: \"desc\",\n    component: RecipeProporsionalResizer,\n  },\n];\nconsole.log(\"exported\", tools);\n\nfunction App() {\n  return (\n    <Container>\n      <h1>Uber Converter</h1>\n\n      {tools.map((tool) => (\n        <Row>\n          <h2>{tool.name}</h2>\n          <label>{tool.description}</label>\n          <tool.component />\n        </Row>\n      ))}\n    </Container>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport SSRProvider from 'react-bootstrap/SSRProvider';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <SSRProvider>\n      <App />\n    </SSRProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n  \n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}