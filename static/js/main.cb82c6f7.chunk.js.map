{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","emptyIngredient","name","qnt","qntResultant","useState","ingredients","setIngredients","refIngredient","setRefIngredient","proporsion","setProporsion","editingName","ing","length","useEffect","filter","ingredient","forEach","console","log","Container","Row","map","Form","Check","type","checked","onChange","event","value","editRefEvent","target","FormControl","placeholder","newValue","numberValue","Number","editQnt","calculedProporsion","editQntResultantEvent","InputGroup","Text","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","SSRProvider","document","getElementById"],"mappings":"wSA8GeA,MAhGf,WACE,IAAMC,EAAkB,CACtBC,KAAM,GACNC,IAAK,EACLC,aAAc,GAEhB,EAAsCC,mBAAuB,CAAC,eAAKJ,KAAnE,mBAAOK,EAAP,KAAoBC,EAApB,KAEA,EAA0CF,qBAA1C,mBAAOG,EAAP,KAAsBC,EAAtB,KAEA,EAAoCJ,mBAAiB,GAArD,mBAAOK,EAAP,KAAmBC,EAAnB,KAcA,SAASC,EAAYC,EAAiBX,GACpCW,EAAIX,KAAOA,EAEPI,EAAYA,EAAYQ,OAAS,KAAOD,GACtCA,EAAIX,KAgCVK,EAAe,GAAD,mBAAKD,GAAL,gBAAuBL,MA3BrCM,EAAe,YAAID,IAgCrB,OArDAS,qBAAU,WAERT,EACCU,QAAO,SAAAC,GAAU,OAAIA,IAAeT,KACpCU,SAAQ,SAAAD,GACPA,EAAWb,aAAea,EAAWd,IAAMO,KAE7CH,EAAe,YAAID,IAEnBa,QAAQC,IAAId,EAAaI,KACxB,CAACA,IAyCJS,QAAQC,IAAI,WAAYd,EAAaI,GAGnC,eAACW,EAAA,EAAD,WACE,gDAIA,cAACC,EAAA,EAAD,UAEGhB,EAAYiB,KAAI,SAACV,GAEhB,OACE,qCACE,cAACW,EAAA,EAAKC,MAAN,CAAYC,KAAK,QAAQ,aAAW,uBAAuBC,QAASd,IAAQL,EAAeoB,SAAU,SAAAC,GAAK,OA1CtH,SAAsBhB,EAAiBiB,GACd,OAAVA,GAGXrB,EAAiBI,GAsCqGkB,CAAalB,EAAKgB,EAAMG,OAAOF,UAC7I,cAACG,EAAA,EAAD,CAAaC,YAAY,kBAAkBJ,MAAOjB,EAAIX,KAAOW,EAAIX,KAAO,GAAI0B,SAAU,SAAAO,GAAQ,OAAIvB,EAAYC,EAAKsB,EAASH,OAAOF,UACnI,cAACG,EAAA,EAAD,CAAaC,YAAY,oBAAoBJ,MAAOjB,EAAIV,IAAMU,EAAIV,IAAM,GAAIyB,SAAU,SAAAO,GAAQ,OA1B1G,SAAiBtB,EAAiBiB,GAChC,IAAMM,EAAcC,OAAOP,GAC3BjB,EAAIV,IAAMiC,EAEV7B,EAAe,YAAID,IAsByFgC,CAAQzB,EAAKsB,EAASH,OAAOF,UAE7HtB,IAAkBK,EAChB,cAACoB,EAAA,EAAD,CAAaC,YAAY,eAAeJ,MAAOjB,EAAIT,aAAeS,EAAIT,aAAe,GAAIwB,SAAU,SAAAO,GAAQ,OAxC3H,SAA+BtB,EAAiBiB,GAC9C,IAAMM,EAAcC,OAAOP,GAG3B,GAFAjB,EAAIT,aAAegC,EACnB7B,EAAe,YAAID,IACfO,IAAQL,EAAe,CACzB,IAAM+B,EAAqB1B,EAAIT,aAAeS,EAAIV,IAClDQ,EAAc4B,GACdpB,QAAQC,IAAIP,EAAK0B,IAiC0GC,CAAsB3B,EAAKsB,EAASH,OAAOF,UAE1J,cAACW,EAAA,EAAWC,KAAZ,UAAkB7B,EAAIT,2BCpFzBuC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,cCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACC,EAAA,EAAD,UACE,cAAC,EAAD,QAGJC,SAASC,eAAe,SAO1Bd,M","file":"static/js/main.cb82c6f7.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Container from 'react-bootstrap/esm/Container';\nimport Row from 'react-bootstrap/esm/Row';\nimport Col from 'react-bootstrap/esm/Col';\nimport { Form, FormControl, FormSelect, InputGroup } from 'react-bootstrap';\n\nclass Ingredient {\n  name: string = \"\"\n  qnt: number = 0\n  qntResultant: number = 0\n}\n\nfunction App() {\n  const emptyIngredient = {\n    name: \"\",\n    qnt: 0,\n    qntResultant: 0\n  }\n  const [ingredients, setIngredients] = useState<Ingredient[]>([{ ...emptyIngredient }])\n\n  const [refIngredient, setRefIngredient] = useState<Ingredient>()\n\n  const [proporsion, setProporsion] = useState<number>(0)\n\n  useEffect(() => {\n\n    ingredients\n    .filter(ingredient => ingredient !== refIngredient)\n    .forEach(ingredient => {\n      ingredient.qntResultant = ingredient.qnt * proporsion;\n    });\n    setIngredients([...ingredients])\n        \n    console.log(ingredients, proporsion)\n  }, [proporsion])\n\n  function editingName(ing: Ingredient, name: string) {\n    ing.name = name;\n\n    if (ingredients[ingredients.length - 1] === ing) {\n      if (ing.name) {\n        addIngredient()\n        return\n      }\n    }\n    setIngredients([...ingredients])\n  }\n  function editRefEvent(ing: Ingredient, value: string): void {\n    const isOn = value === \"on\"\n\n    if (isOn) {\n      setRefIngredient(ing)\n    }\n  }\n  function editQntResultantEvent(ing: Ingredient, value: string): void {\n    const numberValue = Number(value)\n    ing.qntResultant = numberValue;\n    setIngredients([...ingredients])\n    if (ing === refIngredient) {\n      const calculedProporsion = ing.qntResultant / ing.qnt;\n      setProporsion(calculedProporsion)\n      console.log(ing, calculedProporsion)\n    }\n  }\n\n  function editQnt(ing: Ingredient, value: string): void {\n    const numberValue = Number(value)\n    ing.qnt = numberValue;\n\n    setIngredients([...ingredients])\n  }\n  function addIngredient(): void {\n    setIngredients([...ingredients, { ...emptyIngredient },])\n  }\n\n  console.log(\"new draw\", ingredients, proporsion)\n\n  return (\n    <Container>\n      <h1>\n        Uber Converter\n      </h1>\n\n      <Row>\n\n        {ingredients.map((ing) => {\n\n          return (\n            <>\n              <Form.Check type=\"radio\" aria-label=\"Select the reference\" checked={ing === refIngredient} onChange={event => editRefEvent(ing, event.target.value)} />\n              <FormControl placeholder=\"Ingredient name\" value={ing.name ? ing.name : \"\"} onChange={newValue => editingName(ing, newValue.target.value)} />\n              <FormControl placeholder=\"Original Quantity\" value={ing.qnt ? ing.qnt : \"\"} onChange={newValue => editQnt(ing, newValue.target.value)} />\n              {\n                refIngredient === ing ?\n                  <FormControl placeholder=\"New Quantity\" value={ing.qntResultant ? ing.qntResultant : \"\"} onChange={newValue => editQntResultantEvent(ing, newValue.target.value)} />\n                  :\n                  <InputGroup.Text>{ing.qntResultant}</InputGroup.Text>\n              }\n            </>\n          )\n        })}\n\n\n      </Row>\n    </Container>\n  );\n}\n\nexport default App;\n\n\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport SSRProvider from 'react-bootstrap/SSRProvider';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <SSRProvider>\n      <App />\n    </SSRProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n  \n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}